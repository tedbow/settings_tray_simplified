<?php

/**
 * @file
 * Allows configuring blocks and other configuration from the site front-end.
 */

use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\settings_tray_simple\Block\BlockEntityOffCanvasForm;
use Drupal\settings_tray_simple\Form\SystemBrandingOffCanvasForm;
use Drupal\settings_tray_simple\Form\SystemMenuOffCanvasForm;


/**
 * Implements hook_contextual_links_view_alter().
 *
 * Change Configure Blocks into off_canvas links.
 */
function settings_tray_simple_contextual_links_view_alter(&$element, $items) {
  if (isset($element['#links']['settings-trayblock-configure'])) {
    // Place settings_tray_simple link first.
    $settings_tray_simple_link = $element['#links']['settings-trayblock-configure'];
    unset($element['#links']['settings-trayblock-configure']);
    $element['#links'] = ['settings-trayblock-configure' => $settings_tray_simple_link] + $element['#links'];

    // If this is content block change title to avoid duplicate "Quick Edit".
    if (isset($element['#links']['block-contentblock-edit'])) {
      $element['#links']['settings-trayblock-configure']['title'] = t('Quick edit settings');
    }

    $element['#attached']['library'][] = 'core/drupal.dialog.off_canvas';
  }
}

/**
 * Implements hook_block_view_alter().
 */
function settings_tray_simple_block_view_alter(array &$build) {
  // Force a new 'data-contextual-id' attribute on blocks when this module is
  // enabled so as not to reuse stale data cached client-side.
  // @todo Remove when https://www.drupal.org/node/2773591 is fixed.
  $build['#contextual_links']['settings_tray_simple'] = [
    'route_parameters' => [],
  ];
}

/**
 * Implements hook_entity_type_build().
 */
function settings_tray_simple_entity_type_build(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['block']
    ->setFormClass('off_canvas', BlockEntityOffCanvasForm::class)
    ->setLinkTemplate('off_canvas-form', '/admin/structure/block/manage/{block}/off-canvas');
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function settings_tray_simple_preprocess_block(&$variables) {
  $variables['attributes']['class'][] = 'settings-tray-editable';
  $variables['attributes']['data-drupal-settingstray'] = 'editable';
}

/**
 * Implements hook_toolbar_alter().
 *
 * Alters the 'contextual' toolbar tab if it exists (meaning the user is allowed
 * to use contextual links) and if they can administer blocks.
 *
 * @todo Remove the "administer blocks" requirement in
 *   https://www.drupal.org/node/2822965.
 *
 * @see contextual_toolbar()
 */
function settings_tray_simple_toolbar_alter(&$items) {
  $items['contextual']['#cache']['contexts'][] = 'user.permissions';
  if (isset($items['contextual']['tab']) && \Drupal::currentUser()->hasPermission('administer blocks')) {
    $items['contextual']['#weight'] = -1000;
    $items['contextual']['#attached']['library'][] = 'settings_tray_simple/drupal.settings_tray_simple';
    $items['contextual']['tab']['#attributes']['data-drupal-settingstray'] = 'toggle';

    if (!isset($items['contextual']['#wrapper_attributes']['class']) || !in_array('hidden', $items['contextual']['#wrapper_attributes']['class'])) {
      $items['contextual']['#wrapper_attributes']['class'][] = 'edit-mode-inactive';
    }
  }
}

/**
 * Implements hook_block_alter().
 *
 * Ensures every block plugin definition has an 'settings_tray_simple' form specified.
 *
 * @see \Drupal\settings_tray_simple\Access\BlockPluginHasSettingsTrayFormAccessCheck
 */
function settings_tray_simple_block_alter(&$definitions) {
  foreach ($definitions as &$definition) {
    // If a block plugin already defines its own 'settings_tray_simple' form, use that
    // form instead of specifying one here.
    if (isset($definition['forms']['settings_tray_simple'])) {
      continue;
    }

    switch ($definition['id']) {
      // Use specialized forms for certain blocks that do not yet provide the
      // form with their own annotation.
      // @todo Move these into the corresponding block plugin annotations in
      //   https://www.drupal.org/node/2896356.
      case 'system_menu_block':
        $definition['forms']['settings_tray_simple'] = SystemMenuOffCanvasForm::class;
        break;

      case 'system_branding_block':
        $definition['forms']['settings_tray_simple'] = SystemBrandingOffCanvasForm::class;
        break;

      // Otherwise, use the block plugin's normal form rather than
      // a custom form for Settings Tray.
      default:
        $definition['forms']['settings_tray_simple'] = $definition['class'];
        break;
    }
  }
}

/**
 * Implements hook_css_alter().
 */
function settings_tray_simple_css_alter(&$css, AttachedAssetsInterface $assets) {
  // @todo Remove once conditional ordering is introduced in
  //   https://www.drupal.org/node/1945262.
  $path = drupal_get_path('module', 'settings_tray_simple') . '/css/settings_tray_simple.theme.css';
  if (isset($css[$path])) {
    // Use 200 to come after CSS_AGGREGATE_THEME.
    $css[$path]['group'] = 200;
  }
}
